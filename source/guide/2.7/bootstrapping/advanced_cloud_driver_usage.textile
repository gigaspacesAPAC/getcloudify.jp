---
layout: bt_wiki
title: Advanced Cloud Driver Usage
category: Bootstrapping
publish: true
abstract: Advanced Cloud Driver Usage
pageord: 1000
---

This document assumes that you know what Cloudify's cloud driver is. If not, please read "this document":../clouddrivers/cloud_driver.html first and then come back here

h3. Template Installer Configuration

The template installer configuration feature enables "tweaking" specific values in the Cloudify bootstrapping process. This allows setting alternate port numbers, extended timeout values, etc.
This feature allows bootstrapping on environments where Cloudify's sensible default values do not work. Problems are usually related to long network initialization times, slow connection times and long host name resolution times.

h4(info). A template is not required to set all of the fields shown here. Fields that are not specified will use the default value.

Here is a sample of a template with all values of the installer configuration block specified. The values given here are the default ones:

<script src="https://gist.github.com/tamirko/5280271.js"></script>
	
<span id="poc"></span>

<br/>

h3. Port and Memory Configuration

Cloudify management server is composed of different components, each using specific ports and memory allocation.
Each of these components can be configured to use custom settings as displayed below.
Another example refers to the file transfer step and the remote execution step in the bootstrap process.
By default, the port used for remote communications in each of these steps is determined by the protocol used. For example, SCP file transfer defaults to port 22 and CIFS file transfer defaults to port 445.
The "-1" value specified in the port fields of the installer section indicates that the installation should use the default port.

h4. Windows Support

h4(impt). Currently some of the installer configuration fields are not supported with Windows agent images. 

The unsupported fields are:
* fileTransferConnectionTimeoutMillis (not supported with the CIFS file transfer mode)
* remoteExecutionPort (not supported with the WinRM remote execution mode)


<span id="cd"></span>
The following example shows a sample configuration file:
<script src="https://gist.github.com/tamirko/5056934.js"></script>

<br/>

h3(#jurl). Setting Java download path in the Cloud Driver Configuration.

By default, Cloudify download java from http://repository.cloudifysource.org/com/oracle/java/1.6.0_32/jdk-6u32-linux-i586.bin (32 bit) and from http://repository.cloudifysource.org/com/oracle/java/1.6.0_32/jdk-6u32-linux-x64.bin (64 bit).

However, if you know that the VM comes with a pre-installed JDK, you can set the javaUrl attribute's value to "NO_INSTALL" as shown in the following example:
<script src="https://gist.github.com/4537447.js"></script>

If you want Cloudify to download java from a different location, you can set the javaUrl attribute's value to that location as shown in the following example:

<script src="https://gist.github.com/4537455.js"></script>

<br/>

h3(#sos). Setting OS variables in the Cloud Driver Configuration.

You can set or override any OS variable, by specifying it in an @env@ section in a template, as shown in the following example:

<script src="https://gist.github.com/3946055.js?file=setOsVar.groovy"></script>

<br/>

h3(#gstr). Parameterization of the Cloud Driver Configuration.

You can use Groovy GString expressions in the cloud driver DSL, thus you can easily set the values you need in the DSL using a simple properties file with a naming convention as shown in the following example:

Set the following values in ec2-cloud.properties : 

<script src="https://gist.github.com/3927152.js?file=ec2-cloud.properties"></script>

And then you'll be able to use them in ec2-cloud.groovy:

<script src="https://gist.github.com/tamirko/5057115.js"></script>

<h4 class="impt">In order for this to work, you must maintain a naming convention: The cloud driver should be named *yourcloudprovider-cloud.groovy* and the  properites file must be named *yourcloudprovider-cloud.properties*</h4>

<br/>

h3(#cscr). Custom script or code in the Cloud Driver Configuration.

You can script inline or point to an uploaded script as shown in the following example:

<script src="https://gist.github.com/3946829.js?file=inline.groovy"></script>

<br/>

h3(#prepost). Pre-Bootstrap and Post-Bootstrap scripts

Users can add two uploaded scripts : One for Pre-Bootstrap and one for Post-Bootstrap. 
The Pre-Bootstrap script will be executed before the bootstrap-management.sh script and the Post-Bootstrap will be executed after the bootstrap-management.sh script.
These two scripts *must* be named pre-bootstrap.sh and post-bootstrap.sh respectively and they *should* be placed in the same folder as the bootstrap-management.sh - (usually the upload folder).

<br/>

h3(#ipfilter). Configuring Private and Public IP Addresses filters

A cloud node that has multiple NICs may return more than one IP address and in some cases, Cloudify has no way of knowing/deciding if the returned IP address is actually public or private.
In other cases, users may decide to configure it themselves and not leave this decision to Cloudify. 
Users can configure a range of private IPs and/or a range public IPs, according to a CIDR or regular expression filter.
With this feature, users can explicitly define which IP addresses should be considered public and which should be private, by specifying a CIDR filter or a regular expression filter.
Only an IP address that matches such a filter (if defined) will be used.
These filters are optional.

The available filters for public IP addresses are :
* org.cloudifysource.default-cloud-driver.public-ip-cidr
* org.cloudifysource.default-cloud-driver.public-ip-regex

The available filters for private IP addresses are :
* org.cloudifysource.default-cloud-driver.private-ip-cidr
* org.cloudifysource.default-cloud-driver.private-ip-regex

<br/>

The following snippet shows an example of usage :
<script src="https://gist.github.com/tamirko/5804221.js"></script>

The logic is as follows :
# Scan jclouds public addresses, look for an entry which matches a public cidr filter.
# If not found, scan jclouds public addresses, look for an entry which matches a public regex filter.
# If not found, scan jclouds private addresses, look for an entry which matches a public cidr filter.
# If not found, scan jclouds private addresses, look for an entry which matches a public regex cidr filter.
# If not found, return the first address in jclouds public addresses.
# If jclouds public addresses is empty, the public address is null.

h4(impt). If in step 3, Cloudify finds a jclouds private IP address that matches a public CIDR filter, then this private IP address will be considered a public IP address by Cloudify.

The logic for a private address is similar. - Just first scan private IP addresses and match to a private cidr/regex filter.

h4(impt). These filters are only relevant to the default (jclouds) cloud driver.  - Byon/Azure do *not* use this and custom cloud drivers should implement this in their code.

The implementation is available in the  "(newwindow)getAddress":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/jclouds/CloudAddressResolver.java method of CloudAddressResolver.

<br/>

h3(#addtmp). Adding templates 

After the "bootstrapping process":../bootstrapping/bootstrapping_process.html is over, you may add more templates to the cloud.
Simply use the "add-templates":../recipe/command_line_reference.html#add_templates CLI command as follows: <span class="snippet">add-templates [directory or file path] </span>

* If the path is to a groovy file, then the file should be named *-template.groovy and it should be the only one with that suffix in its directory. 
  All the files in its directory will be copied to the management machine together with the groovy file itself.
  
* If the path is to a folder or of a zip file, then the folder (or the unzipped folder) should include at least one template file (a file that ends with @-template.groovy@ and all the required files for evaluating the template files (e.g. the upload folder).

All the template groovy files that have prefixes other than the template's name, will be renamed to &lt;template name&gt;-template.groovy.
For example &#34;linux-template.groovy&#34; will become &#34;SMALL_LINUX-template.groovy&#34;.
Properties and overrides files will be renamed in the same manner.

Here's an example of a file that contains a template: 

<script src="https://gist.github.com/4244926.js?file=addedTemplate.groovy"></script>

h4(impt). The template (see example above) must be in brackets since it is translated into a Map.


h4(info). Only one template per groovy file is allowed. - If a groovy file contains more than one template, then an exception will be thrown and no templates will be added.
				
h4(impt). Templates that already exist, will NOT be overridden.

<br/>

h3(#rsv). Setting Reserved Memory

The @reservedMemoryCapacityPerMachineInMB@ attribue which is set in the provider section of the cloud driver, is the estimated amount of RAM used by the operating system and the Cloudify agent running on the machine and any other non-Cloudify application running on the machine (An example of non-Cloudify applications is if the VM comes with pre-installed applications, that are not a part of Cloudify and are not a part of the current recipe).

The @machineMemoryMB@ attribue which is set in the templates section of the cloud driver for each template, is the amount of RAM available to a machine.

* In a dedicated mode (isolationSLA - one service instance per machine): 
The value of reservedMemoryCapacityPerMachineInMB must be smaller then the value of machineMemoryMB which is defined in the template.
Cloudify will use the remaining memory on the machine for capacity planning of this service instance, and will thus be able to install the instance on the newly allocated machine. 

* If a service uses one of the Multi Tenancy modes:
The memory capacity requirement of the service instance is defined by the user (via isolationSLA), therefore the user must specify a valid number in the instanceMemoryMB property, taking into account the reservedMemoryCapacityPerMachineInMB and machineMemoryMB, otherwise there will not be enough memory to install even a single instance. 

h4(impt). The reservedMemoryCapacityPerMachineInMB is only relevant in a Multi Tenancy mode, since in the dedicated mode, the capacity planning parameters are calculated by Cloudify.


<br/>
You can read about isolationSLA (Multi Tenant Deployment) "here":../developing/service_recipe.html#mtd.

<span id="thrott"></span>

<br/>

h3. Start-Machine Request Throttling:

Start-Machine requests for agent machines may fail for various reasons that can be related to the remote cloud or to the actual cloud driver implementation.  
Start-Machine throttling is intended to limit the number of failed requests in a specific time frame. 
By default, the request throttler will allow for 5 consecutive failures in 5 minutes. 
These properties can be overridden in the cloud-driver inside the custom properties map as shown in the following snippet : 

<script src="https://gist.github.com/tamirko/8520504.js"></script>

<br/>

h3. The Default Compute Cloud Driver

Cloudify comes with a built-in cloud driver implementation that is based on the popular "jclouds":http://www.jclouds.org framework. This cloud driver enables you to deploy Cloudify services for many cloud providers and APIs. For a full listing of supported clouds, see "jclouds : Supported Providers":http://jclouds.apache.org/reference/providers/.
The default cloud driver can be used as-is, or as the basis for an extension that suits your requirements.

h4(info). GigaSpaces regularly tests this cloud driver implementation on "Amazon EC2":http://aws.amazon.com and "Rackspace Cloud":http://www.rackspace.com.

<br/>

h3. Service Specific Security Group Rules

Grizzly and Havana cloud drivers support the creation of service-specific security groups rules.
This is useful when a single service requires open communication with public clients, while the rest of the application should not be accessible. For example, a web server service would likely require an open port for incoming requests.
Setting service specific access rules (security group rules) is done in the *service* groovy file:

<script src="https://gist.github.com/noakup/8541546.js"></script>

Here an access rule is created to allow incoming requests from any client, through port 8080.
The template name simply specifies the relevant network template, as defined in the cloud groovy file.

<br/>

h3. Network Cloud Driver

The network cloud driver is the enabler for the recipe service context API that assigns floating ip addresses (also know as elastic IPs). 
<script src="https://gist.github.com/7984834.js?file=floating_ip_recipe.groovy"></script>

An openstack implementation is available: "OpenstackNetworkDriver":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/network/openstack/OpenstackNetworkDriver.java

<br/>

h3. Storage Cloud Driver

The storage cloud driver is the enabler for the recipe service context API to create and attach volumes (also known as EBS). 
<script src="https://gist.github.com/7984834.js?file=mount_strage_recipe_snippet.groovy"></script>

An openstack implementation is available: "OpenstackStorageDriver":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/storage/openstack/OpenstackStorageDriver.java
An AWS implementation is available: "EbsStorageDriver":https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/storage/aws/EbsStorageDriver.java

<br/>

h3. See Also

* "Developing Custom Cloud Drivers":../clouddrivers/developing_custom_clouddriver.html
